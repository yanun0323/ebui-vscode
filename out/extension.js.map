{"version":3,"file":"extension.js","mappings":"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","sources":["../external node-commonjs \"util\"","../external node-commonjs \"child_process\"","../external commonjs \"vscode\"","../webpack/bootstrap",".././src/extension.ts"],"sourcesContent":["module.exports = require(\"util\");","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport * as cp from 'child_process';\nimport * as util from 'util';\nimport * as path from 'path';\n\nconst execPromise = util.promisify(cp.exec);\n\n// Create output channel for logging\nconst outputChannel = vscode.window.createOutputChannel('ebui-vscode');\n\n// Debounce timer\nlet debounceTimer: NodeJS.Timeout | undefined;\n\nexport async function activate(context: vscode.ExtensionContext) {\n\t// Output activation message\n\toutputChannel.appendLine('EBUI extension activated');\n\n\ttry {\n\t\t// Try to install EBUI tool\n\t\tawait installEbuiTool();\n\t} catch (error) {\n\t\tvscode.window.showErrorMessage(`Failed to install EBUI tool: ${error}`);\n\t\toutputChannel.appendLine(`Failed to install EBUI tool: ${error}`);\n\t}\n\n\t// Register command: Install EBUI tool\n\tlet installEbuiCommand = vscode.commands.registerCommand('ebui-vscode.installEbui', async () => {\n\t\ttry {\n\t\t\tawait installEbuiTool();\n\t\t\tvscode.window.showInformationMessage('EBUI tool installed successfully!');\n\t\t\toutputChannel.appendLine('EBUI tool installed successfully!');\n\t\t} catch (error) {\n\t\t\tvscode.window.showErrorMessage(`Failed to install EBUI tool: ${error}`);\n\t\t\toutputChannel.appendLine(`Failed to install EBUI tool: ${error}`);\n\t\t}\n\t});\n\tcontext.subscriptions.push(installEbuiCommand);\n\n\t// Register command: Run EBUI on current file\n\tlet runEbuiCommand = vscode.commands.registerCommand('ebui-vscode.runEbui', async () => {\n\t\tawait runEbuiOnCurrentFile();\n\t});\n\tcontext.subscriptions.push(runEbuiCommand);\n\n\t// Register file save event listener with debouncing\n\tlet onSaveListener = vscode.workspace.onDidSaveTextDocument((document) => {\n\t\t// Check if auto-run is enabled and the file is a Go file\n\t\tconst config = vscode.workspace.getConfiguration('ebui-vscode');\n\t\tif (config.get<boolean>('enableAutoRun') && document.languageId === 'go') {\n\t\t\t// Get the user-defined debounce delay (default to 500ms if not set)\n\t\t\tconst debounceDelay = config.get<number>('debounceDelay') || 500;\n\t\t\t\n\t\t\t// Clear any existing timer\n\t\t\tif (debounceTimer) {\n\t\t\t\tclearTimeout(debounceTimer);\n\t\t\t}\n\t\t\t\n\t\t\t// Create a new timer\n\t\t\tdebounceTimer = setTimeout(async () => {\n\t\t\t\tawait runEbuiOnCurrentFile();\n\t\t\t\tdebounceTimer = undefined;\n\t\t\t}, debounceDelay);\n\t\t}\n\t});\n\tcontext.subscriptions.push(onSaveListener);\n}\n\nasync function installEbuiTool(): Promise<void> {\n\tvscode.window.showInformationMessage('Installing EBUI tool...');\n\toutputChannel.appendLine('Installing EBUI tool...');\n\t\n\ttry {\n\t\tconst { stdout, stderr } = await execPromise('go install github.com/yanun0323/ebui/tool/ebui@latest');\n\t\toutputChannel.appendLine('EBUI tool installation successful:');\n\t\toutputChannel.appendLine(stdout);\n\t\tif (stderr) {\n\t\t\toutputChannel.appendLine('EBUI tool installation warnings:');\n\t\t\toutputChannel.appendLine(stderr);\n\t\t}\n\t\t\n\t\treturn;\n\t} catch (error) {\n\t\toutputChannel.appendLine(`EBUI tool installation failed: ${error}`);\n\t\tthrow new Error('Unable to install EBUI tool, make sure Go is installed on your system');\n\t}\n}\n\nasync function runEbuiOnCurrentFile(): Promise<void> {\n\t// Get current active editor\n\tconst editor = vscode.window.activeTextEditor;\n\tif (!editor) {\n\t\tvscode.window.showInformationMessage('No file is open');\n\t\toutputChannel.appendLine('No file is open');\n\t\treturn;\n\t}\n\n\t// Check if the file is a Go file\n\tif (editor.document.languageId !== 'go') {\n\t\tvscode.window.showInformationMessage('Current file is not a Go file');\n\t\toutputChannel.appendLine('Current file is not a Go file');\n\t\treturn;\n\t}\n\n\t// Get the absolute path of the file\n\tconst filePath = editor.document.uri.fsPath;\n\t\n\t// Create status bar item to display progress\n\tconst statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\n\tstatusBarItem.text = `$(sync~spin) Running ebui...`;\n\tstatusBarItem.show();\n\n\ttry {\n\t\t// Execute ebui command\n\t\tconst command = `ebui -f \"${filePath}\"`;\n\t\toutputChannel.appendLine(`Executing command: ${command}`);\n\t\t\n\t\tconst { stdout, stderr } = await execPromise(command);\n\t\t\n\t\t// Output command results\n\t\toutputChannel.appendLine('EBUI execution results:');\n\t\toutputChannel.appendLine(stdout);\n\t\tif (stderr) {\n\t\t\toutputChannel.appendLine('EBUI execution warnings:');\n\t\t\toutputChannel.appendLine(stderr);\n\t\t}\n\t\t\n\t\t// Update status bar\n\t\tstatusBarItem.text = `$(check) EBUI execution completed`;\n\t\tsetTimeout(() => {\n\t\t\tstatusBarItem.dispose();\n\t\t}, 3000);\n\t} catch (error) {\n\t\toutputChannel.appendLine(`EBUI execution failed: ${error}`);\n\t\tstatusBarItem.text = `$(error) EBUI execution failed`;\n\t\tsetTimeout(() => {\n\t\t\tstatusBarItem.dispose();\n\t\t}, 3000);\n\t\tvscode.window.showErrorMessage(`EBUI execution failed: ${error}`);\n\t}\n}\n\nexport function deactivate() {\n\t// Clear any existing timer\n\tif (debounceTimer) {\n\t\tclearTimeout(debounceTimer);\n\t}\n\toutputChannel.appendLine('EBUI extension deactivated');\n} \n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","async","context","outputChannel","appendLine","installEbuiTool","error","vscode","window","showErrorMessage","installEbuiCommand","commands","registerCommand","showInformationMessage","subscriptions","push","runEbuiCommand","runEbuiOnCurrentFile","onSaveListener","workspace","onDidSaveTextDocument","document","config","getConfiguration","get","languageId","debounceDelay","debounceTimer","clearTimeout","setTimeout","execPromise","promisify","cp","exec","createOutputChannel","stdout","stderr","Error","editor","activeTextEditor","filePath","uri","fsPath","statusBarItem","createStatusBarItem","StatusBarAlignment","Left","text","show","command","dispose"],"sourceRoot":""}